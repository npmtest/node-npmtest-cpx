{"/home/travis/build/npmtest/node-npmtest-cpx/test.js":"/* istanbul instrument in package npmtest_cpx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cpx/lib.npmtest_cpx.js":"/* istanbul instrument in package npmtest_cpx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cpx = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cpx = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cpx/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cpx && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cpx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cpx\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cpx.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cpx.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cpx.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cpx.__dirname + '/lib.npmtest_cpx.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cpx/node_modules/cpx/lib/index.js":"/**\n * @author Toru Nagashima\n * @copyright 2016 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\n\"use strict\";\n\nvar Cpx = require(\"./cpx\");\n\nexports.Cpx = Cpx;\n\n/**\n * Copies the files which match with a given glob pattern.\n *\n * @param {string} source - The glob pattern of source files.\n * @param {string} outDir - The path of an output directory.\n * @param {object} [options = null] - Omittable. An option object.\n * @param {boolean} [options.clean = false] - A flag to remove files that have\n *      been copied previously before copy.\n * @param {boolean} [options.dereference = false] - A flag to follow symbolic\n *      links.\n * @param {function[]} [options.transform = null] - Functions to make transform\n *      streams for each file.\n * @param {function} [cb = null] - A callback function to be called after done.\n * @returns {Cpx} A Cpx instance.\n */\nexports.copy = function copy(source, outDir) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n    var cb = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n\n    if (typeof options === \"function\") {\n        /* eslint-disable no-param-reassign */\n        cb = options;\n        options = null;\n        /* eslint-enable no-param-reassign */\n    }\n\n    var cpx = new Cpx(source, outDir, options);\n    if (options && options.clean) {\n        cpx.clean(function (err) {\n            if (err == null) {\n                cpx.copy(cb);\n            } else if (cb != null) {\n                cb(err);\n            }\n        });\n    } else {\n        cpx.copy(cb);\n    }\n\n    return cpx;\n};\n\n/**\n * Copies the files which match with a given glob pattern.\n *\n * @param {string} source - The glob pattern of source files.\n * @param {string} outDir - The path of an output directory.\n * @param {object} [options = null] - Omittable. An option object.\n * @param {boolean} [options.clean = false] - A flag to remove files that have\n *      been copied previously before copy.\n * @param {boolean} [options.dereference = false] - A flag to follow symbolic\n *      links.\n * @returns {Cpx} A Cpx instance.\n */\nexports.copySync = function copySync(source, outDir) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n    var cpx = new Cpx(source, outDir, options);\n    if (options && options.clean) {\n        cpx.cleanSync();\n    }\n    cpx.copySync();\n};\n\n/**\n * Copies the files which match with a given glob pattern.\n * Then this observes the files and copies when modified them.\n *\n * @param {string} source - The glob pattern of source files.\n * @param {string} outDir - The path of an output directory.\n * @param {object} [options = null] - Omittable. An option object.\n * @param {boolean} [options.clean = false] - A flag to remove files that have\n *      been copied previously before copy.\n * @param {boolean} [options.dereference = false] - A flag to follow symbolic\n *      links.\n * @returns {Cpx} A Cpx instance.\n */\nexports.watch = function watch(source, outDir) {\n    var options = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n    var cpx = new Cpx(source, outDir, options);\n    if (options && options.clean) {\n        cpx.clean(function (err) {\n            if (err == null) {\n                cpx.watch();\n            } else {\n                cpx.emit(\"watch-error\", err);\n            }\n        });\n    } else {\n        cpx.watch();\n    }\n\n    return cpx;\n};","/home/travis/build/npmtest/node-npmtest-cpx/node_modules/cpx/lib/cpx.js":"/**\n * @author Toru Nagashima\n * @copyright 2016 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\n\"use strict\";\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _setImmediate2 = require(\"babel-runtime/core-js/set-immediate\");\n\nvar _setImmediate3 = _interopRequireDefault(_setImmediate2);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _symbol = require(\"babel-runtime/core-js/symbol\");\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _require = require(\"events\");\n\nvar EventEmitter = _require.EventEmitter;\n\nvar fs = require(\"fs\");\n\nvar _require2 = require(\"path\");\n\nvar dirname = _require2.dirname;\nvar resolvePath = _require2.resolve;\nvar relativePath = _require2.relative;\nvar joinPath = _require2.join;\n\nvar _require3 = require(\"chokidar\");\n\nvar createWatcher = _require3.watch;\n\nvar _require4 = require(\"glob\");\n\nvar Glob = _require4.Glob;\nvar searchSync = _require4.sync;\n\nvar getBasePath = require(\"glob2base\");\nvar mkdir = require(\"mkdirp\");\nvar mkdirSync = mkdir.sync;\n\nvar _require5 = require(\"minimatch\");\n\nvar Minimatch = _require5.Minimatch;\n\nvar copyFile = require(\"./copy\");\nvar copyFileSync = require(\"./copy-sync\");\nvar Queue = require(\"./queue\");\n\nvar BASE_DIR = (0, _symbol2.default)(\"baseDir\");\nvar DEREFERENCE = (0, _symbol2.default)(\"dereference\");\nvar INCLUDE_EMPTY_DIRS = (0, _symbol2.default)(\"include-empty-dirs\");\nvar INITIAL_COPY = (0, _symbol2.default)(\"initialCopy\");\nvar OUT_DIR = (0, _symbol2.default)(\"outDir\");\nvar PRESERVE = (0, _symbol2.default)(\"preserve\");\nvar SOURCE = (0, _symbol2.default)(\"source\");\nvar TRANSFORM = (0, _symbol2.default)(\"transform\");\nvar UPDATE = (0, _symbol2.default)(\"update\");\nvar QUEUE = (0, _symbol2.default)(\"queue\");\nvar WATCHER = (0, _symbol2.default)(\"watcher\");\n\n/**\n * Converts a file path to use glob.\n * Glob doesn't support the delimiter of Windows.\n *\n * @param {string} path - A path to convert.\n * @returns {string} The normalized path.\n */\nfunction normalizePath(path) {\n    if (path == null) {\n        return null;\n    }\n\n    var normalizedPath = relativePath(process.cwd(), resolvePath(path));\n    normalizedPath = normalizedPath.replace(/\\\\/g, \"/\");\n    if (/\\/$/.test(normalizedPath)) {\n        normalizedPath = normalizedPath.slice(0, -1);\n    }\n    return normalizedPath || \".\";\n}\n\n/**\n * Applys a given action for each file that matches with a given pattern.\n *\n * @param {Cpx} cpx - An instance.\n * @param {string} pattern - A pattern to find files.\n * @param {function} action - A predicate function to apply.\n * @returns {void}\n */\nfunction doAllSimply(cpx, pattern, action) {\n    new Glob(pattern, { nodir: !cpx.includeEmptyDirs, silent: true }).on(\"match\", action.bind(cpx));\n}\n\n/**\n * Applys a given action for each file that matches with a given pattern.\n * Then calls a given callback function after done.\n *\n * @param {Cpx} cpx - An instance.\n * @param {string} pattern - A pattern to find files.\n * @param {function} action - A predicate function to apply.\n * @param {function} cb - A callback function.\n * @returns {void}\n */\nfunction doAll(cpx, pattern, action, cb) {\n    if (cb == null) {\n        doAllSimply(cpx, pattern, action);\n        return;\n    }\n\n    var count = 0;\n    var done = false;\n    var lastError = null;\n\n    /**\n     * Calls the callback function if done.\n     * @returns {void}\n     */\n    function cbIfEnd() {\n        if (done && count === 0) {\n            cb(lastError);\n        }\n    }\n\n    new Glob(pattern, {\n        nodir: !cpx.includeEmptyDirs,\n        silent: true,\n        follow: cpx.dereference\n    }).on(\"match\", function (path) {\n        if (lastError != null) {\n            return;\n        }\n\n        count += 1;\n        action.call(cpx, path, function (err) {\n            count -= 1;\n            lastError = lastError || err;\n            cbIfEnd();\n        });\n    }).on(\"end\", function () {\n        done = true;\n        cbIfEnd();\n    }).on(\"error\", function (err) {\n        lastError = lastError || err;\n    });\n}\n\nmodule.exports = function (_EventEmitter) {\n    (0, _inherits3.default)(Cpx, _EventEmitter);\n\n    /**\n     * @param {string} source - A blob for copy files.\n     * @param {string} outDir - A file path for the destination directory.\n     * @param {object} options - An options object.\n     */\n    function Cpx(source, outDir, options) {\n        (0, _classCallCheck3.default)(this, Cpx);\n\n        options = options || {}; // eslint-disable-line no-param-reassign\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Cpx).call(this));\n\n        _this[SOURCE] = normalizePath(source);\n        _this[OUT_DIR] = normalizePath(outDir);\n        _this[DEREFERENCE] = Boolean(options.dereference);\n        _this[INCLUDE_EMPTY_DIRS] = Boolean(options.includeEmptyDirs);\n        _this[INITIAL_COPY] = options.initialCopy === undefined || Boolean(options.initialCopy);\n        _this[PRESERVE] = Boolean(options.preserve);\n        _this[TRANSFORM] = [].concat(options.transform).filter(Boolean);\n        _this[UPDATE] = Boolean(options.update);\n        _this[QUEUE] = new Queue();\n        _this[BASE_DIR] = null;\n        _this[WATCHER] = null;\n        return _this;\n    }\n\n    //==========================================================================\n    // Commons\n    //--------------------------------------------------------------------------\n\n    /**\n     * The source file glob to copy.\n     * @type {string}\n     */\n\n\n    (0, _createClass3.default)(Cpx, [{\n        key: \"src2dst\",\n\n\n        /**\n         * Convert a glob from source to destination.\n         *\n         * @param {string} path - A path to convert.\n         * @returns {string} The converted path.\n         */\n        value: function src2dst(path) {\n\n            if (this.base === \".\") {\n                return joinPath(this.outDir, path);\n            }\n            return path.replace(this.base, this.outDir);\n        }\n\n        /**\n         * Copy a file.\n         *\n         * @param {string} srcPath - A file path to copy.\n         * @param {function} [cb = null] - A callback function.\n         * @returns {void}\n         */\n\n    }, {\n        key: \"enqueueCopy\",\n        value: function enqueueCopy(srcPath) {\n            var _this2 = this;\n\n            var cb = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n\n            var dstPath = this.src2dst(srcPath);\n            if (dstPath === srcPath) {\n                if (cb != null) {\n                    (0, _setImmediate3.default)(cb, null);\n                    return;\n                }\n            }\n\n            this[QUEUE].push(function (next) {\n                mkdir(dirname(dstPath), next);\n            });\n            this[QUEUE].push(function (next) {\n                copyFile(srcPath, dstPath, _this2, function (err) {\n                    if (err == null) {\n                        _this2.emit(\"copy\", { srcPath: srcPath, dstPath: dstPath });\n                    }\n\n                    next();\n                    if (cb != null) {\n                        cb(err || null);\n                    }\n                });\n            });\n        }\n\n        /**\n         * Remove a file.\n         *\n         * @param {string} path - A file path to remove.\n         * @param {function} [cb = null] - A callback function.\n         * @returns {void}\n         */\n\n    }, {\n        key: \"enqueueRemove\",\n        value: function enqueueRemove(path) {\n            var _this3 = this;\n\n            var cb = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\n\n            var lastError = null;\n            var stat = null;\n            this[QUEUE].push(function (next) {\n                fs.stat(path, function (err, result) {\n                    lastError = err;\n                    stat = result;\n                    next();\n                });\n            });\n            this[QUEUE].push(function (next) {\n                if (stat && stat.isDirectory()) {\n                    fs.rmdir(path, function (err) {\n                        if (err == null) {\n                            _this3.emit(\"remove\", { path: path });\n                        }\n\n                        lastError = err;\n                        next();\n                    });\n                } else {\n                    fs.unlink(path, function (err) {\n                        if (err == null) {\n                            _this3.emit(\"remove\", { path: path });\n                        }\n\n                        lastError = err;\n                        next();\n                    });\n                }\n            });\n            this[QUEUE].push(function (next) {\n                fs.rmdir(dirname(path), function () {\n                    next();\n                    if (cb != null) {\n                        cb(lastError);\n                    }\n                });\n            });\n        }\n\n        //==========================================================================\n        // Clean Methods\n        //--------------------------------------------------------------------------\n\n        /**\n         * Remove all files that matches `this.source` like pattern in `this.dest`\n         * directory.\n         * @param {function} [cb = null] - A callback function.\n         * @returns {void}\n         */\n\n    }, {\n        key: \"clean\",\n        value: function clean() {\n            var cb = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\n\n            var dest = this.src2dst(this.source);\n            if (dest === this.source) {\n                if (cb != null) {\n                    (0, _setImmediate3.default)(cb, null);\n                }\n                return;\n            }\n\n            doAll(this, dest, this.enqueueRemove, cb);\n        }\n\n        /**\n         * Remove all files that matches `this.source` like pattern in `this.dest`\n         * directory.\n         * @returns {void}\n         * @thrpws {Error} IO error.\n         */\n\n    }, {\n        key: \"cleanSync\",\n        value: function cleanSync() {\n            var dest = this.src2dst(this.source);\n            if (dest === this.source) {\n                return;\n            }\n\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)(searchSync(dest, {\n                    nodir: !this.includeEmptyDirs,\n                    silent: true\n                })), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var path = _step.value;\n\n                    try {\n                        var stat = fs.statSync(path);\n                        if (stat.isDirectory()) {\n                            fs.rmdirSync(path);\n                        } else {\n                            fs.unlinkSync(path);\n                        }\n                    } catch (err) {\n                        if (err.code !== \"ENOENT\") {\n                            throw err;\n                        }\n                    }\n\n                    try {\n                        fs.rmdirSync(dirname(path));\n                    } catch (err) {\n                        if (err.code !== \"ENOTEMPTY\") {\n                            throw err;\n                        }\n                    }\n\n                    this.emit(\"remove\", { path: path });\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }\n\n        //============================================================================\n        // Copy Methods\n        //----------------------------------------------------------------------------\n\n        /**\n         * Copy all files that matches `this.source` pattern to `this.outDir`.\n         *\n         * @param {function} [cb = null] - A callback function.\n         * @returns {void}\n         */\n\n    }, {\n        key: \"copy\",\n        value: function copy() {\n            var cb = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\n\n            doAll(this, this.source, this.enqueueCopy, cb);\n        }\n\n        /**\n         * Copy all files that matches `this.source` pattern to `this.outDir`.\n         *\n         * @returns {void}\n         * @thrpws {Error} IO error.\n         */\n\n    }, {\n        key: \"copySync\",\n        value: function copySync() {\n            var _this4 = this;\n\n            if (this.transformFactories.length > 0) {\n                throw new Error(\"Synchronous copy can't use the transform option.\");\n            }\n\n            var srcPaths = searchSync(this.source, {\n                nodir: !this.includeEmptyDirs,\n                silent: true,\n                follow: this.dereference\n            });\n            srcPaths.forEach(function (srcPath) {\n                var dstPath = _this4.src2dst(srcPath);\n                if (dstPath === srcPath) {\n                    return;\n                }\n\n                mkdirSync(dirname(dstPath));\n                copyFileSync(srcPath, dstPath, _this4);\n\n                _this4.emit(\"copy\", { srcPath: srcPath, dstPath: dstPath });\n            });\n        }\n\n        //============================================================================\n        // Watch Methods\n        //----------------------------------------------------------------------------\n\n        /**\n         * Copy all files that matches `this.source` pattern to `this.outDir`.\n         * And watch changes in `this.base`, and copy only the file every time.\n         *\n         * @returns {void}\n         * @throws {Error} This had been watching already.\n         */\n\n    }, {\n        key: \"watch\",\n        value: function watch() {\n            var _this5 = this;\n\n            if (this[WATCHER] != null) {\n                throw new Error(\"InvalidStateError\");\n            }\n\n            var m = new Minimatch(this.source);\n\n            var firstCopyCount = 0;\n            var ready = false;\n            var fireReadyIfReady = function fireReadyIfReady() {\n                if (ready && firstCopyCount === 0) {\n                    _this5.emit(\"watch-ready\");\n                }\n            };\n\n            var onAdded = function onAdded(path) {\n                var normalizedPath = normalizePath(path);\n                if (m.match(normalizedPath)) {\n                    if (ready) {\n                        _this5.enqueueCopy(normalizedPath);\n                    } else if (_this5.initialCopy) {\n                        firstCopyCount += 1;\n                        _this5.enqueueCopy(normalizedPath, function () {\n                            firstCopyCount -= 1;\n                            fireReadyIfReady();\n                        });\n                    }\n                }\n            };\n            var onRemoved = function onRemoved(path) {\n                var normalizedPath = normalizePath(path);\n                if (m.match(normalizedPath)) {\n                    var dstPath = _this5.src2dst(normalizedPath);\n                    if (dstPath !== normalizedPath) {\n                        _this5.enqueueRemove(dstPath);\n                    }\n                }\n            };\n\n            this[WATCHER] = createWatcher(this.base, {\n                cwd: process.cwd(),\n                persistent: true,\n                followSymlinks: this.dereference\n            });\n\n            this[WATCHER].on(\"add\", onAdded).on(\"addDir\", onAdded).on(\"unlink\", onRemoved).on(\"unlinkDir\", onRemoved).on(\"change\", function (path) {\n                var normalizedPath = normalizePath(path);\n                if (m.match(normalizedPath)) {\n                    _this5.enqueueCopy(normalizedPath);\n                }\n            }).on(\"ready\", function () {\n                ready = true;\n                fireReadyIfReady();\n            }).on(\"error\", function (err) {\n                _this5.emit(\"watch-error\", err);\n            });\n        }\n\n        /**\n         * Stop watching.\n         *\n         * @returns {void}\n         */\n\n    }, {\n        key: \"unwatch\",\n        value: function unwatch() {\n            if (this[WATCHER] != null) {\n                this[WATCHER].close();\n                this[WATCHER] = null;\n            }\n        }\n\n        /**\n         * Stop watching.\n         *\n         * @returns {void}\n         */\n\n    }, {\n        key: \"close\",\n        value: function close() {\n            this.unwatch();\n        }\n    }, {\n        key: \"source\",\n        get: function get() {\n            return this[SOURCE];\n        }\n\n        /**\n         * The destination directory to copy.\n         * @type {string}\n         */\n\n    }, {\n        key: \"outDir\",\n        get: function get() {\n            return this[OUT_DIR];\n        }\n\n        /**\n         * The flag to follow symbolic links.\n         * @type {boolean}\n         */\n\n    }, {\n        key: \"dereference\",\n        get: function get() {\n            return this[DEREFERENCE];\n        }\n\n        /**\n         * The flag to copy empty directories which is matched with the glob.\n         * @type {boolean}\n         */\n\n    }, {\n        key: \"includeEmptyDirs\",\n        get: function get() {\n            return this[INCLUDE_EMPTY_DIRS];\n        }\n\n        /**\n         * The flag to copy files at the initial time of watch.\n         * @type {boolean}\n         */\n\n    }, {\n        key: \"initialCopy\",\n        get: function get() {\n            return this[INITIAL_COPY];\n        }\n\n        /**\n         * The flag to copy file attributes.\n         * @type {boolean}\n         */\n\n    }, {\n        key: \"preserve\",\n        get: function get() {\n            return this[PRESERVE];\n        }\n\n        /**\n         * The factories of transform streams.\n         * @type {function[]}\n         */\n\n    }, {\n        key: \"transformFactories\",\n        get: function get() {\n            return this[TRANSFORM];\n        }\n\n        /**\n         * The flag to disallow overwriting.\n         * @type {boolean}\n         */\n\n    }, {\n        key: \"update\",\n        get: function get() {\n            return this[UPDATE];\n        }\n\n        /**\n         * The base directory of `this.source`.\n         * @type {string}\n         */\n\n    }, {\n        key: \"base\",\n        get: function get() {\n            if (this[BASE_DIR] == null) {\n                this[BASE_DIR] = normalizePath(getBasePath(new Glob(this.source)));\n            }\n            return this[BASE_DIR];\n        }\n    }]);\n    return Cpx;\n}(EventEmitter);","/home/travis/build/npmtest/node-npmtest-cpx/node_modules/cpx/lib/copy.js":"/**\n * @author Toru Nagashima\n * @copyright 2016 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\n\"use strict\";\n\nvar fs = require(\"fs\");\nvar mkdir = require(\"mkdirp\");\nvar Queue = require(\"./queue\");\n\n/**\n * @param {string} src - A path of the source file.\n * @param {string} dst - A path of the destination file.\n * @param {function[]} transformFactories - Factory functions for transform streams.\n * @param {function} cb - A callback function that called after copied.\n * @returns {void}\n * @private\n */\nfunction copyBody(src, dst, transformFactories, cb) {\n    var reader = fs.createReadStream(src);\n    var writer = fs.createWriteStream(dst);\n    var streams = [reader];\n\n    /**\n     * Clean up.\n     * @param {Error|undefined} err - An error or undefined.\n     * @returns {void}\n     */\n    function next(err) {\n        try {\n            streams.forEach(function (s) {\n                s.removeListener(\"error\", next);\n                if (typeof s.destroy === \"function\") {\n                    s.destroy();\n                }\n            });\n            writer.removeListener(\"error\", next);\n            writer.removeListener(\"finish\", next);\n        } catch (cleanupErr) {\n            cb(err || cleanupErr);\n            return;\n        }\n\n        cb(err);\n    }\n\n    reader.on(\"error\", next);\n    writer.on(\"error\", next);\n    writer.on(\"finish\", next);\n\n    try {\n        transformFactories.reduce(function (input, factory) {\n            var t = factory(src);\n            t.on(\"error\", next);\n            streams.push(t);\n\n            return input.pipe(t);\n        }, reader).pipe(writer);\n    } catch (err) {\n        next(err);\n    }\n}\n\n/**\n * @param {string} src - A path of the source file.\n * @param {string} dst - A path of the destination file.\n * @param {object} options - Options.\n * @param {function[]} options.transformFactories - Factory functions for transform streams.\n * @param {boolean} options.preserve - The flag to copy attributes.\n * @param {boolean} options.update - The flag to disallow overwriting.\n * @param {function} cb - A callback function that called after copied.\n * @returns {void}\n * @private\n */\nmodule.exports = function copy(src, dst, _ref, cb) {\n    var transformFactories = _ref.transformFactories;\n    var preserve = _ref.preserve;\n    var update = _ref.update;\n\n    var q = new Queue();\n    var stat = null;\n\n    q.push(function (next) {\n        return fs.stat(src, function (err, result) {\n            if (err) {\n                cb(err);\n            } else {\n                stat = result;\n                next();\n            }\n        });\n    });\n    if (update) {\n        q.push(function (next) {\n            return fs.stat(dst, function (err, dstStat) {\n                if (!err && dstStat.mtime.getTime() > stat.mtime.getTime()) {\n                    // Don't overwrite because the file on destination is newer than\n                    // the source file.\n                    cb(null);\n                } else {\n                    next();\n                }\n            });\n        });\n    }\n\n    q.push(function (next) {\n        if (stat.isDirectory()) {\n            mkdir(dst, function (err) {\n                if (err) {\n                    cb(err);\n                } else {\n                    next();\n                }\n            });\n        } else {\n            copyBody(src, dst, transformFactories, function (err) {\n                if (err) {\n                    cb(err);\n                } else {\n                    next();\n                }\n            });\n        }\n    });\n    q.push(function (next) {\n        return fs.chmod(dst, stat.mode, function (err) {\n            if (err) {\n                cb(err);\n            } else {\n                next();\n            }\n        });\n    });\n\n    if (preserve) {\n        q.push(function (next) {\n            return fs.chown(dst, stat.uid, stat.gid, function (err) {\n                if (err) {\n                    cb(err);\n                } else {\n                    next();\n                }\n            });\n        });\n        q.push(function (next) {\n            return fs.utimes(dst, stat.atime, stat.mtime, function (err) {\n                if (err) {\n                    cb(err);\n                } else {\n                    next();\n                }\n            });\n        });\n    }\n\n    q.push(function (next) {\n        next();\n        cb(null);\n    });\n};","/home/travis/build/npmtest/node-npmtest-cpx/node_modules/cpx/lib/queue.js":"/**\n * @author Toru Nagashima\n * @copyright 2016 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\n\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _setImmediate2 = require(\"babel-runtime/core-js/set-immediate\");\n\nvar _setImmediate3 = _interopRequireDefault(_setImmediate2);\n\nvar _symbol = require(\"babel-runtime/core-js/symbol\");\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar TAIL = (0, _symbol2.default)(\"tail\");\n\n/**\n * Dequeue jobs.\n *\n * @param {Queue} queue - A job queue instance.\n * @param {object} item - The current job item.\n * @returns {void}\n */\nfunction dequeue(queue, item) {\n    item.action(function () {\n        if (item.next) {\n            (0, _setImmediate3.default)(dequeue, queue, item.next);\n        } else {\n            queue[TAIL] = null;\n        }\n    });\n}\n\n/**\n * Job Queue.\n *\n * @private\n */\nmodule.exports = function () {\n    /**\n     * Constructor.\n     */\n    function Queue() {\n        (0, _classCallCheck3.default)(this, Queue);\n\n        this[TAIL] = null;\n    }\n\n    /**\n     * Adds a job item into this queue.\n     *\n     *     queue.push(done => {\n     *         // do something.\n     *         done();\n     *     });\n     *\n     * @param {function} action - The action of new job.\n     * @returns {void}\n     */\n\n\n    (0, _createClass3.default)(Queue, [{\n        key: \"push\",\n        value: function push(action) {\n\n            var item = { action: action, next: null };\n            if (this[TAIL] != null) {\n                this[TAIL] = this[TAIL].next = item;\n            } else {\n                this[TAIL] = item;\n                (0, _setImmediate3.default)(dequeue, this, item);\n            }\n        }\n    }]);\n    return Queue;\n}();","/home/travis/build/npmtest/node-npmtest-cpx/node_modules/cpx/lib/copy-sync.js":"/**\n * @author Toru Nagashima\n * @copyright 2016 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\n\"use strict\";\n\nvar _require = require(\"safe-buffer\");\n\nvar Buffer = _require.Buffer;\n\nvar fs = require(\"fs\");\nvar mkdirSync = require(\"mkdirp\").sync;\nvar MAX_BUFFER = 2048;\n\n/**\n * @param {string} src - A path of the source file.\n * @param {string} dst - A path of the destination file.\n * @returns {void}\n * @private\n */\nfunction copyBodySync(src, dst) {\n    var buffer = Buffer.allocUnsafe(MAX_BUFFER);\n    var bytesRead = MAX_BUFFER;\n    var pos = 0;\n\n    var input = fs.openSync(src, \"r\");\n    try {\n        var output = fs.openSync(dst, \"w\");\n        try {\n            while (MAX_BUFFER === bytesRead) {\n                bytesRead = fs.readSync(input, buffer, 0, MAX_BUFFER, pos);\n                fs.writeSync(output, buffer, 0, bytesRead);\n                pos += bytesRead;\n            }\n        } finally {\n            fs.closeSync(output);\n        }\n    } finally {\n        fs.closeSync(input);\n    }\n}\n\n/**\n * @param {string} src - A path of the source file.\n * @param {string} dst - A path of the destination file.\n * @param {object} options - Options.\n * @param {boolean} options.preserve - The flag to copy attributes.\n * @param {boolean} options.update - The flag to disallow overwriting.\n * @returns {void}\n * @private\n */\nmodule.exports = function copySync(src, dst, _ref) {\n    var preserve = _ref.preserve;\n    var update = _ref.update;\n\n    var stat = fs.statSync(src);\n\n    if (update) {\n        try {\n            var dstStat = fs.statSync(dst);\n            if (dstStat.mtime.getTime() > stat.mtime.getTime()) {\n                // Don't overwrite because the file on destination is newer than\n                // the source file.\n                return;\n            }\n        } catch (_err) {\n            // ignore - The file may not exist.\n        }\n    }\n\n    if (stat.isDirectory()) {\n        mkdirSync(dst);\n    } else {\n        copyBodySync(src, dst);\n    }\n    fs.chmodSync(dst, stat.mode);\n\n    if (preserve) {\n        fs.chownSync(dst, stat.uid, stat.gid);\n        fs.utimesSync(dst, stat.atime, stat.mtime);\n    }\n};","/home/travis/build/npmtest/node-npmtest-cpx/node_modules/cpx/bin/help.js":"/**\n * @author Toru Nagashima\n * @copyright 2016 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n/* eslint no-console:0 */\n\n\"use strict\";\n\n/**\n * Prints the help text.\n *\n * @returns {void}\n */\n\nmodule.exports = function help() {\n                          console.log(\"\\nUsage: cpx <source> <dest> [options]\\n\\n    Copy files, watching for changes.\\n\\n        <source>  The glob of target files.\\n        <dest>    The path of a destination directory.\\n\\nOptions:\\n\\n    -c, --command <command>   A command text to transform each file.\\n    -C, --clean               Clean files that matches <source> like pattern in\\n                              <dest> directory before the first copying.\\n    -L, --dereference         Follow symbolic links when copying from them.\\n    -h, --help                Print usage information.\\n    --include-empty-dirs      The flag to copy empty directories which is\\n                              matched with the glob.\\n    --no-initial              The flag to not copy at the initial time of watch.\\n                              Use together '--watch' option.\\n    -p, --preserve            The flag to copy attributes of files.\\n                              This attributes are uid, gid, atime, and mtime.\\n    -t, --transform <name>    A module name to transform each file. cpx lookups\\n                                the specified name via \\\"require()\\\".\\n    -u, --update              The flag to not overwrite files on destination if\\n                              the source file is older.\\n    -v, --verbose             Print copied/removed files.\\n    -V, --version             Print the version number.\\n    -w, --watch               Watch for files that matches <source>, and copy\\n                              the file to <dest> every changing.\\n\\nExamples:\\n\\n    cpx \\\"src/**/*.{html,png,jpg}\\\" app\\n    cpx \\\"src/**/*.css\\\" app --watch --verbose\\n\\nSee Also:\\n    https://github.com/mysticatea/cpx\\n\");\n};","/home/travis/build/npmtest/node-npmtest-cpx/node_modules/cpx/bin/main.js":"/**\n * @author Toru Nagashima\n * @copyright 2016 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n/* eslint no-console:0, no-process-exit:0, no-process-env:0 */\n\n\"use strict\";\n\nvar _create = require(\"babel-runtime/core-js/object/create\");\n\nvar _create2 = _interopRequireDefault(_create);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _require = require(\"path\");\n\nvar resolvePath = _require.resolve;\n\nvar _require2 = require(\"child_process\");\n\nvar spawn = _require2.spawn;\n\nvar _require3 = require(\"resolve\");\n\nvar resolveModule = _require3.sync;\n\nvar _require4 = require(\"shell-quote\");\n\nvar parseShellQuote = _require4.parse;\n\nvar duplexer = require(\"duplexer\");\nvar Cpx = require(\"../lib/cpx\");\n\nmodule.exports = function main(source, outDir, args) {\n    //--------------------------------------------------------------------------\n    // Resolve Command.\n    var commands = [].concat(args.command).filter(Boolean).map(function (command) {\n        if (typeof command !== \"string\") {\n            console.error(\"Invalid --command option\");\n            process.exit(1);\n        }\n\n        return function (file) {\n            var env = (0, _create2.default)(process.env, { FILE: { value: file } });\n            var parts = parseShellQuote(command, env);\n            var child = spawn(parts[0], parts.slice(1), { env: env });\n            var outer = duplexer(child.stdin, child.stdout);\n            child.on(\"exit\", function (code) {\n                if (code !== 0) {\n                    var error = new Error(\"non-zero exit code in command: \" + command);\n                    outer.emit(\"error\", error);\n                }\n            });\n            child.stderr.pipe(process.stderr);\n\n            return outer;\n        };\n    });\n\n    //--------------------------------------------------------------------------\n    // Resolve Transforms.\n    var ABS_OR_REL = /^[.\\/]/;\n    var transforms = [].concat(args.transform).filter(Boolean).map(function (arg) {\n        // eslint-disable-line array-callback-return,consistent-return\n        if (typeof arg === \"string\") {\n            return { name: arg, argv: null };\n        }\n        if (typeof arg._[0] === \"string\") {\n            return { name: arg._.shift(), argv: arg };\n        }\n\n        console.error(\"Invalid --transform option\");\n        process.exit(1);\n    }).map(function (item) {\n        var createStream = ABS_OR_REL.test(item.name) ? require(resolvePath(item.name)) : require(resolveModule(item.name, { basedir: process.cwd() }));\n        return function (file) {\n            return createStream(file, item.argv);\n        };\n    });\n\n    //--------------------------------------------------------------------------\n    // Merge commands and transforms as same as order of process.argv.\n    var C_OR_COMMAND = /^(?:-c|--command)$/;\n    var T_OR_TRANSFORM = /^(?:-t|--transform)$/;\n    var mergedTransformFactories = process.argv.map(function (part) {\n        if (C_OR_COMMAND.test(part)) {\n            return commands.shift();\n        }\n        if (T_OR_TRANSFORM.test(part)) {\n            return transforms.shift();\n        }\n        return null;\n    }).filter(Boolean);\n\n    //--------------------------------------------------------------------------\n    // Main.\n    var cpx = new Cpx(source, outDir, {\n        transform: mergedTransformFactories,\n        dereference: args.dereference,\n        includeEmptyDirs: args.includeEmptyDirs,\n        initialCopy: args.initial,\n        preserve: args.preserve,\n        update: args.update\n    });\n    if (args.verbose) {\n        cpx.on(\"copy\", function (event) {\n            console.log(\"Copied: \" + event.srcPath + \" --> \" + event.dstPath);\n        });\n        cpx.on(\"remove\", function (event) {\n            console.log(\"Removed: \" + event.path);\n        });\n    }\n\n    if (args.clean) {\n        if (args.verbose) {\n            console.log();\n            console.log(\"Clean: \" + cpx.src2dst(cpx.source));\n            console.log();\n        }\n        try {\n            cpx.cleanSync();\n        } catch (err) {\n            console.error(\"Failed to clean: \" + err.message + \".\");\n            process.exit(1);\n        }\n        if (args.verbose) {\n            console.log();\n            console.log(\"Copy: \" + source + \" --> \" + outDir);\n            console.log();\n        }\n    }\n\n    if (args.watch) {\n        if (args.verbose) {\n            cpx.on(\"watch-ready\", function () {\n                console.log();\n                console.log(\"Be watching in \" + cpx.base);\n                console.log();\n            });\n        }\n        cpx.on(\"watch-error\", function (err) {\n            console.error(err.message);\n        });\n\n        // In order to kill me by test harness on Windows.\n        process.stdin.setEncoding(\"utf8\");\n        process.stdin.on(\"data\", function (chunk) {\n            if (chunk === \"KILL\") {\n                process.exit(0);\n            }\n        });\n\n        cpx.watch();\n    } else {\n        cpx.copy(function (err) {\n            if (err) {\n                console.error(\"Failed to copy: \" + err.message + \".\");\n                process.exit(1);\n            }\n        });\n    }\n};","/home/travis/build/npmtest/node-npmtest-cpx/node_modules/cpx/bin/version.js":"/**\n * @author Toru Nagashima\n * @copyright 2016 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n/* eslint no-console:0 */\n\n\"use strict\";\n\n/**\n * Reads `package.json` then returns the version text.\n *\n * @param {string} path - The path of `package.json`.\n * @returns {string|null} The version text.\n */\n\nfunction get(path) {\n    try {\n        return require(path).version;\n    } catch (_err) {\n        return null;\n    }\n}\n\n/**\n * Prints the version text.\n *\n * @returns {void}\n */\nmodule.exports = function version() {\n    console.log(\"v\" + (get(\"../package.json\") || get(\"../../package.json\")));\n};"}